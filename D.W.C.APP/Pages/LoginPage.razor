@page "/login"
@using D.W.C.APP.Service
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IGoogleAuthService GoogleAuthService
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject MicrosoftAuthService microsoftAuthService




<div class="login-container">
    <div class="login-logo">
        <!-- Upewnij się, że ścieżka do logo jest poprawna -->
        <img src="" alt="Logo" style="margin: auto; display: block;" />
    </div>
    <div class="login-form">
        <h1 class="welcome-message">Witaj!</h1>
        <p class="login-message">Zaloguj się do D.W.C</p>
        <EditForm Model="@loginModel" OnValidSubmit="@HandleValidSubmit">
            <div class="form-groupe">
                <label for="email"></label>
                <InputText id="email" @bind-Value="loginModel.Email" class="form-control" placeholder="email" />
            </div>
            <div class="form-groupa">
                <label for="password"></label>
                <InputText id="password" @bind-Value="loginModel.Password" type="password" class="form-controle" placeholder="hasło" />
                <a href="#" class="forgot-password-link">Nie pamiętasz hasła?</a>
            </div>
            <div class="form-groupz">
                <button class="btn-login">
                    <img src="/images/zalog.svg" alt="Zaloguj" class="icon" />
                    <span class="btn-text">Zaloguj się</span>
                </button>
            </div>
        </EditForm>
        <div class="external-logins">
            <button class="btn-google" @onclick="SignInWithGoogle">
                <img src="/images/group.svg" alt="Google" class="icon" />
                <span class="btn-text">Zaloguj się przez Google</span>
            </button>
            <button class="btn-microsoft" @onclick="SignInWithMicrosoft">
                <img src="/images/microsoft.svg" alt="Microsoft" class="icon" />
                <span class="btn-text">Zaloguj się przez Microsoft</span>
            </button>
        </div>

    </div>
    <div class="registration-form-container @(isRegistrationFormVisible ? "visible" : "")">
        <div class="form-group">
            <input type="text" class="form-imie" placeholder="Imię" />
        </div>
        <div class="form-group">
            <input type="text" class="form-imie" placeholder="Nazwisko" />
        </div>
        <div class="form-group">
            <input type="email" class="form-imie" placeholder="email" />
        </div>
        <div class="form-group">
            <input type="password" class="form-imie" placeholder="hasło" />
        </div>
        <div class="form-group">
            <input type="password" class="form-imie" placeholder="hasło ponownie" />
        </div>
    </div>
</div>
<div class="create-account-container">
    <button @onclick="ToggleRegistrationForm" class="create-account-btn">
        <span class="btn-text">Stwórz konto</span>
    </button>
</div>
<style>
    .login-container {
        height: 100%;
        width: 100%;
        align-items: center;
        position: relative;
        display: flex;
        justify-content: center;
    }

    .login-form {
        top: 25%;
        position: fixed;
        right: 30%;
        flex-grow: 0;
        left: 47%;
        width: 400px;
        height: 400px;
        margin-left: 0%;
    }

    .login-logo {
        object-fit: contain;
        position: fixed;
        height: 200%;
        width: 80%;
        background-color: #8cabff;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .form-control::placeholder {
        flex-grow: 0;
        font-family: Inter;
        font-size: 20px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: normal;
        text-align: left;
        color: #9b9b9b;
    }

    .form-controle::placeholder {
        flex-grow: 0;
        font-family: Inter;
        font-size: 20px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: normal;
        text-align: left;
        color: #9b9b9b;
    }

    .btn-google {
        width: 400px;
        height: 40px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
        margin: 30px 270px 30px -10px;
        padding: 0 42px 0 20px;
        border-radius: 5px;
        border: solid 1px #9b9b9b;
        background-color: #fff;
    }


    .btn-microsoft {
        width: 400px;
        height: 40px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
        margin: 30px 270px 430px -10px;
        padding: 0 42px 0 20px;
        border-radius: 5px;
        border: solid 1px #9b9b9b;
        background-color: #fff;
    }

    .btn-login {
        width: 400px;
        height: 40px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
        margin: 50px 270px 30px -10px;
        padding: 0 42px 0 20px;
        border-radius: 5px;
        border: solid 1px #9b9b9b;
        background-color: #fff;
    }

    .form-control {
        width: 400px;
        height: 40px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
        margin: 0px 270px 0px -10px;
        padding: 8px 68px 8px 20px;
        border-radius: 5px;
        border: solid 1px #9b9b9b;
        background-color: #fff;
        border-radius: .25rem; /* Zaokrąglenie obramowania */
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        box-sizing: border-box;
    }

    .form-controle {
        width: 400px;
        height: 40px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
        margin: 0px 270px 0px -10px;
        padding: 8px 68px 8px 20px;
        border-radius: 5px;
        border: solid 1px #9b9b9b;
        background-color: #fff;
        border-radius: .25rem;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        box-sizing: border-box;
    }

    .icon {
        width: 24px;
        height: 24px;
    }

    .btn-text {
        flex-grow: 0;
        font-family: Poppins;
        font-size: 20px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: 2px;
        text-align: left;
        color: #9b9b9b;
    }

    .forgot-password-link {
        width: 300px;
        height: 30px;
        margin: 200px 0px 0px 250px;
        font-family: Poppins;
        font-size: 12px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: 1px;
        text-align: right;
        color: #8cabff;
    }

        .forgot-password-link:hover {
            text-decoration: underline;
        }


    .create-account-container {
        position: absolute;
        top: 0;
        right: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        margin: 20px 15px 110px 270px;
    }

    .create-account-btn {
        width: 200px;
        height: 35px;
        display: flex;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        gap: 13px;
        margin: 0px 0 0px 0px;
        padding: 0 20px;
        border-radius: 5px;
        border: solid 1px #9b9b9b;
        background-color: #fff;
    }


    .welcome-message {
        margin: 0px 0px 0px -10px;
        font-family: Poppins;
        font-size: 40px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: 4px;
        text-align: left;
        color: #8cabff;
    }

    .login-message {
        margin: 0px 0px 0px -10px;
        font-family: Poppins;
        font-size: 20px;
        font-weight: normal;
        font-stretch: normal;
        font-style: normal;
        line-height: normal;
        letter-spacing: 1px;
        text-align: left;
        color: #8cabff;
    }

    .registration-form-container {
        top: 35%;
        position: fixed;
        right: 200%;
        flex-grow: 0;
        width: 400px;
        height: 400px;
        margin-right: 0%;
    }

        .registration-form-container.visible {
            right: 5%;
        }

    .form-group {
        margin: 33px 100px 33px -50px;
    }

    .form-imie {
        width: 400px;
        height: 40px;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
        gap: 10px;
        margin: -15px 0 30px 120px;
        padding: 8px 68px 8px 20px;
        border-radius: 5px;
        border: solid 1px #d1d1d1;
        background-color: #dfdfdf;
    }

</style>
@code {
    private LoginModel loginModel = new LoginModel();
    private bool isRegistrationFormVisible = false;
    private readonly IGoogleAuthService _googleAuthService;
    private CustomAuthenticationStateProvider customAuthProvider => (CustomAuthenticationStateProvider) AuthenticationStateProvider;
    private void ToggleRegistrationForm()
    {
        isRegistrationFormVisible = !isRegistrationFormVisible;
    }
    private async Task HandleValidSubmit()
    {

    }

    public class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }
    private async Task SignInWithMicrosoft()
    {
    }


    private async Task SignInWithGoogle()
    {
        try
        {
            var credential = await GoogleAuthService.AuthenticateAsync();
            if (credential != null)
            {
                var token = credential.Token.IdToken;
                if (!string.IsNullOrEmpty(token))
                {
                    await customAuthProvider.SignInWithGoogleAsync(token);
                    await localStorage.SetItemAsync("userToken", token);
                    var userToken = await localStorage.GetItemAsync<string>("userToken");
                }
                else
                {
                    Console.WriteLine("Nie udało się uzyskać tokenu dostępu od Google.");
                }
            }
            else
            {
                Console.WriteLine("Nie udało się uzyskać poświadczeń od Google.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Wystąpił wyjątek podczas logowania za pomocą Google: {ex.Message}");
        }
    }
}
@functions {
    private string GetContainerClass()
    {
        return isRegistrationFormVisible ? "visible" : "";
    }
}