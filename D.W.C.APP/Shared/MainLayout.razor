@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager

<div class="page @(isUserAuthenticated ? "" : "not-authenticated")">
    @if (isUserAuthenticated)
    {
        <nav id="sidebar" class="sidebar @(collapseNavMenu ? "collapsed" : "")" role="navigation">
            <NavMenu CollapseNavMenu="@collapseNavMenu" />
        </nav>

        <header class="top-row">
            <button @onclick="ToggleNavMenu" class="nav-toggle-button" aria-label="Toggle navigation menu"></button>
            <button @onclick="Settings" class="button-icon" aria-label="Settings"></button>
            <button @onclick="Logout" class="button-out" aria-label="Logout"></button>
        </header>
    }

    <main class="@GetMainContentCssClass()" role="main">
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private bool collapseNavMenu = false;
    private bool isUserAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += HandleAuthenticationStateChanged;
        await CheckUserAuthentication();
    }

    private async Task CheckUserAuthentication()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        isUserAuthenticated = authState.User.Identity.IsAuthenticated;
        if (isUserAuthenticated)
        {
            // Assuming "collapseNavMenu" is only relevant for authenticated users.
            var storedValue = await localStorage.GetItemAsync<string>("collapseNavMenu");
            collapseNavMenu = storedValue == null ? true : bool.Parse(storedValue);
        }
    }

    private async void HandleAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await CheckUserAuthentication();
        StateHasChanged(); // Refresh UI
    }

    private string GetMainContentCssClass()
    {
        return isUserAuthenticated && !collapseNavMenu ? "main-content" : "main-content full-width";
    }

    private async Task ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
        await localStorage.SetItemAsync("collapseNavMenu", collapseNavMenu.ToString());
    }

    private void Settings()
    {
        // Placeholder for settings logic
    }

    private async Task Logout()
    {
        await localStorage.RemoveItemAsync("userToken");
        isUserAuthenticated = false; // Make sure to update authentication state.
        NavigationManager.NavigateTo("/login", forceLoad: true);
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= HandleAuthenticationStateChanged;
    }
}
